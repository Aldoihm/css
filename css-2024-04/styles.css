/* Box Model
    Layout.
    Layout: Es la geometria que usa el navegador para:
    -Donde va cada elemento
    -Que tamaño tiene
    -Cuánto se aproxima cada elemento

    Modelos de Layout que existen:
        -Box model
        -Position
        -Flexbox
        -Css Grid
    
    Box Model (modelo de caja)
    Todos los elementos HTML son rectángulos
    
    Dos tipos de cajas (o elementos)
    1.- Bloque: 
        *Ocupa todo el espacio horizontal disponible
        *Crean una línea nueva
        *Tienen ancho (width) y alto (height)
    
    2.- Inline: 
        *Abarca solo el espacio necesario para su contenido 
        *No tienen dimensiones, porque se ajusta al contenido
        *En las imagenes su dimensión dependera del tamaño de la imágen

    Unidades de longitus (medida de tamaño)
        - Pixeles (px)
        - em (% del tamañao de fuente o letra actual) osea de ese elemento con respecto a lo alto
        - rem (% del tamaño de fuente o letra de body) r:es de root (osea la raíz)
*/

h1{
    background: yellow;
    width: 5em;
}
p{
    background: pink;
    width: 4em;
}
h2{
    background: gray;
    color: white;
}

span{
    background: yellow;
    /* observar que no obedece el ancho y alto, porque es un elemento de linea y no tiene dimensioens */
    width: 10000px;
    height: 10000px;
}
img{
    width: 200px;
    border-radius: 10px;
    margin-left: auto;
    margin-right: auto;
}

/* Propiedad display
    block: hace que un elemento se comporte como bloque
    inline: hace que un elemento de bloque, se comporque como linea
    inline-block
    none: no se muestra
    flex: hay curso de esto
    grid: hay curso de esto

    El unico apunte que explicare es el inline-block porque los otros son obvios
    
    inline-block
    Se usa como inline, pero le podemos dar ancho y alto como en el block
    las imagenes son inline-block y tiene un natural width y natural height
    si las imagenes les das un width, el navegador calcula el alto, automáticamente y viceversa

*/

.h2-inline-block{
    display: inline-block;
    color: blue;
    width: 15em;
    text-align: center;
    padding: 10px;
}

/* 
    MARGIN
    
    Define la separación externa que posee un elemento con respecto al resto.
    margin :
        -un solo numero = los 4 margenes (5px)
        -don numeros = primer numero (arrba y abajo), segundo numero (derecha - izquierda) (5px 4px)
        -tres numeros =  primer numero (arriba), segundo numero (a la derecha e izquierda), tercer numero(abajo) (3px, 7px 5 px)
        -cuatro numeros = lo mismo que lo de abajo, (sentido a los agujas del reloj) (1px 2px 3px 4 px)    

    margin-top
    margin-right
    margin-bottom
    margin-leflt

    Tip: recordar que ordena en direción a las agujas del reloj

    Se puede manejar con 
    -px pixeles, 
    -con porcentaje (%) con respecto al ancho de la etiqueta padre, no se usa por lo general,
    
    TRUCOS
    Para centrar
    1.- Asignarle un ancho y deber tener un display block
    2.- margin-left:auto;
    3.- margin-right: auto;

    Cosas que no debo hacer es centrar asi
    marin: 0 auto;
    margin: auto;

    Abreviatura para escribir
    ml:a;
    mr:a;
*/

.box{    
    background: pink;
    height: 100px;
    width: 150px;
    margin-left: auto;
    margin-right: auto;
    text-align: center;
}

/* Colapsado de márgenes verticales 
    Se refiere a que los vargenes horizontales entre 2 elementos se suman
    y los margenes verticales, no se suman
    Por lo general solo colocan un margin-button, ya que nada sirve poner un margin-top porque se colapsan
    Esto lo verificamos en el inspector de elementos

    Tambien se colapsan los margenes verticales de padre a hijo
        para corregir esto, solo es necesario colocar un paddin != 0 
        al padre y listo, ya que también existen los margin negativos
*/

.box{
    margin-top: 20px;
    margin-bottom: 20px;
}

.boxpadre{
    background: red;
    width: 300px;
    height: 150px;
    padding: 0.1px; /*Solucion para que el margin padre e hijo no se colapsen*/
}

.boxhijo{
    background: blue;
    margin:20px;
    width: 150px;
    height: 75px;
    color: #FFF;
    padding: 5%;
}

/* PADDING 
    Es la separación entre la orilla de la caja y su contenido
    es lo mismo que el margin.
    tambien se puede manejar por porcernta %, pero este se calcula
    con respecto a la anchura del mismo elemento
*/

